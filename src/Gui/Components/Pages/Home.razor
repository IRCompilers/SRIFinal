@page "/"
@using Gui.Models
@using Gui.Query
@inject IQueryService QueryService
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>


@if (!_isModalOpen)
{
    <div class="centered-input mb-4">
        <input type="text" class="autocomplete-input" value="@AutoComplete" readonly/>
        <input type="text"
               @ref="_inputElement"
               @bind-value="Query" 
               @oninput="UpdateAutoComplete" 
               @onkeydown="HandleKeyDown" 
               class="user-input" 
               placeholder="Enter text here..."/>
        <button class="search" @onclick="@PopulateBooks">Search</button>
    </div>

    <div class="book-cards-container mt-5">
        @foreach (var book in _books)
        {
            <Card Book="book" OnBookmarkClick="OpenModal"></Card>
        }
    </div>
}

@if (_isModalOpen)
{
    <div class="my-modal">
        <div class="my-modal-content">
            <div class="book-card">
                <img class="book-image" src="@_selectedBook.ImageUrl" alt="@_selectedBook.Title">
                <div class="book-details">
                    <h2 class="book-title">@_selectedBook.Title</h2>
                    <p class="book-author">
                        @_selectedBook.Author <span class="book-year">@_selectedBook.Year</span>
                    </p>
                    <p class="book-rating">
                        @($"{_selectedBook.Rating:F1}") <img src="star.svg" alt="star" class="star-icon"/>
                    </p>
                    <p class="book-description">@_selectedBook.Description</p>
                    <div class="book-tags">
                        @foreach (var tag in _selectedBook.Tags)
                        {
                            <span class="tag-chip">@tag</span>
                        }
                    </div>
                    <a href="@_selectedBook.Url" class="book-link">Read More</a>
                </div>
                <span @onclick="CloseModal" class="close-button">&times;</span>
            </div>
        </div>
    </div>
}

<script>
    window.handleKeyDown = function (element) {
        element.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
            }
        });
    }
</script>

@code {
    private IEnumerable<BookCard> _books = [];
    private string Query { get; set; } = null!;
    private string AutoComplete { get; set; } = null!;
    private ElementReference _inputElement;
    
    private async Task PopulateBooks()
    {
        _books = await QueryService.QueryAsync(Query);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("handleKeyDown", _inputElement);
        }
    }

    private BookCard _selectedBook = null!;
    private bool _isModalOpen;

    private void OpenModal(BookCard book)
    {
        _selectedBook = book;
        _isModalOpen = true;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
    }

    private async Task UpdateAutoComplete(ChangeEventArgs e)
    {
        var wholeInput = e.Value!.ToString()!;
        var toAutocomplete = wholeInput.Split().Last();
        var result = string.IsNullOrWhiteSpace(toAutocomplete) ? "" : await QueryService.AutoCompleteAsync(toAutocomplete ?? "");
        AutoComplete = wholeInput + result.Replace("\"", "");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PopulateBooks();
        }
        else if (e.Key == "Tab")
        {
            Query = AutoComplete;
        }
    }

}