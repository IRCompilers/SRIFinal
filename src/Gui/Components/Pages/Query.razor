@using Gui.Events
@using Gui.Query
@inject IQueryService QueryService
@inject IEventService eventService
@inject IJSRuntime JsRuntime

<div class="search-input mb-2">
    <input class="bottom-input"
           @bind="query"
           @oninput="FetchAutoComplete"
           @onkeyup="HandleKeyDown"
           placeholder="@queryPlaceholder"
           @ref="_inputElement"
           type="text"/>
    <input class="ghost-input top-input" readonly type="text" value="@ghostQuery"/>
    <button class="search-button" @onclick="Search">
        <i class="fas fa-search"></i>
    </button>
</div>

<div class="search-input mb-2">
    <input class="bottom-input"
           @bind="queryBook"
           @oninput="FetchAutoCompleteBook"
           @onkeyup="HandleKeyDownBook"
           placeholder="@bookPlaceholder"
           @ref="_inputElement2"
           type="text"/>
    <input class="ghost-input top-input" readonly type="text" value="@ghostQueryBook"/>
    <button class="search-button" @onclick="Search">
        <i class="fas fa-book"></i>
    </button>
</div>

<script>
    window.handleKeyDown = function (element) {
        element.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
            }
        });
    }
</script>

@code {
    private string queryPlaceholder { get; set; } = null!;
    private string bookPlaceholder { get; set; } = null!;

    private string query { get; set; } = null!;
    private string queryBook { get; set; } = null!;
    private string ghostQuery { get; set; } = null!;
    private string ghostQueryBook { get; set; } = null!;
    
    private ElementReference _inputElement;
    private ElementReference _inputElement2;

    private void Search()
    {
        eventService.TriggerOnQuerySearch((query, queryBook, 1));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            queryPlaceholder = PickRandomPlaceholder();
            bookPlaceholder = PickRandomPlaceholderRead();
            await JsRuntime.InvokeVoidAsync("handleKeyDown", _inputElement);
            await JsRuntime.InvokeVoidAsync("handleKeyDown", _inputElement2);
            StateHasChanged();
        }
    }

    private string PickRandomPlaceholder()
    {
        string[] placeholders =
        [
            "I like science fiction ...",
            "Detective stories are my thing ...",
            "I'm into fantasy ...",
            "I'm a fan of horror ...",
            "I'm a fan of romance ...",
            "Historical fiction is the best ...",
        ];

        return placeholders[new Random().Next(0, placeholders.Length)];
    }

    private string PickRandomPlaceholderRead()
    {
        string[] placeholders =
        [
            "Foundation, The Lord of the Rings, The Hobbit ...",
            "Sherlock Holmes, Hercule Poirot, Miss Marple ...",
            "Harry Potter, The Witcher, The Wheel of Time ...",
            "Dracula, Frankenstein, The Shining ...",
            "Pride and Prejudice, Wuthering Heights, Jane Eyre ...",
        ];

        return placeholders[new Random().Next(0, placeholders.Length)];
    }

    private async Task FetchAutoComplete(ChangeEventArgs e)
    {
        var wholeInput = e.Value!.ToString()!;
        var toAutocomplete = wholeInput.Split().Last();
        var result = string.IsNullOrWhiteSpace(toAutocomplete) ? "" : await QueryService.AutoCompleteAsync(toAutocomplete ?? "");
        ghostQuery = wholeInput + result.Replace("\"", "");
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                Search();
                break;
            case "Tab":
                query = ghostQuery;
                break;
        }
    }

    private async Task FetchAutoCompleteBook(ChangeEventArgs e)
    {
        var wholeInput = e.Value!.ToString()!;
        var toAutocomplete = wholeInput.Split(',', StringSplitOptions.TrimEntries).Last();
        var result = string.IsNullOrWhiteSpace(toAutocomplete) ? "" : await QueryService.AutoCompleteBookAsync(toAutocomplete ?? "");
        ghostQueryBook = wholeInput + result.Replace("\"", "");
    }

    private void HandleKeyDownBook(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                Search();
                break;
            case "Tab":
                queryBook = ghostQueryBook;
                break;
        }
    }

}