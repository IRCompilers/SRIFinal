@page "/"
@using Gui.Models
@using Gui.Query
@inject IQueryService QueryService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>


@if (!_isModalOpen)
{
    <div class="centered-input mb-4">
        <input type="text" class="autocomplete-input" value="@AutoComplete" readonly/>
        <input type="text"
               @ref="_inputElement"
               @bind-value="Query"
               @oninput="UpdateAutoComplete"
               @onkeyup="HandleKeyDown"
               class="user-input"
               placeholder="Enter text here..."/>
        <button class="search" @onclick="@PopulateBooks">Search</button>
    </div>

    <div class="book-cards-container mt-5">
        @foreach (var book in _books)
        {
            <Card Book="book" OnBookmarkClick="OpenModal"></Card>
        }
    </div>
}

@if (_isModalOpen)
{
    <div class="my-modal">
        <div class="my-modal-content">
            <div class="book-card">
                <img class="book-image" src="@_selectedBook.ImageUrl" alt="@_selectedBook.Title">
                <div class="book-details">
                    <h2 class="book-title">@_selectedBook.Title</h2>
                    <p class="book-author">
                        @_selectedBook.Author <span class="book-year">@_selectedBook.Year</span>
                    </p>
                    <p class="book-rating">
                        @($"{_selectedBook.Rating:F1}") <img src="star.svg" alt="star" class="star-icon"/>
                    </p>
                    <p class="book-description">@_selectedBook.Description</p>
                    <div class="book-tags">
                        @foreach (var tag in _selectedBook.Tags)
                        {
                            <span class="tag-chip">@tag</span>
                        }
                    </div>
                    <a href="@_selectedBook.Url" class="book-link">Read More</a>
                </div>
                <span @onclick="CloseModal" class="close-button">&times;</span>
            </div>
        </div>
    </div>
}

<script>
    window.handleKeyDown = function (element) {
        element.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
            }
        });
    }
</script>

@code {
    private IEnumerable<BookCard> _books = [];
    private string Query { get; set; } = null!;
    private string AutoComplete { get; set; } = null!;
    private ElementReference _inputElement;

    private async Task PopulateBooks()
    {
        _books = await QueryService.QueryAsync(Query);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("handleKeyDown", _inputElement);
        }
    }

    private BookCard _selectedBook = null!;
    private bool _isModalOpen;

    private void OpenModal(BookCard book)
    {
        _selectedBook = book;
        _isModalOpen = true;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
    }

    private async Task UpdateAutoComplete(ChangeEventArgs e)
    {
        var wholeInput = e.Value!.ToString()!;
        var toAutocomplete = wholeInput.Split().Last();
        var result = string.IsNullOrWhiteSpace(toAutocomplete) ? "" : await QueryService.AutoCompleteAsync(toAutocomplete ?? "");
        AutoComplete = wholeInput + result.Replace("\"", "");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                await PopulateBooks();
                break;
            case "Tab":
                Query = AutoComplete;
                break;
        }
    }

}


/// CSS

.centered-input {
    display: flex;
    background-color: var(--main-color);
    border-radius: 0 0 20px 20px;
}

.styled-input {
    padding: 10px;
    font-size: 16px;
    border-radius: 5px;
    border: 1px solid #ccc;
}


.book-cards-container {
    margin-top: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: center;
}

.my-modal{
    padding: 3rem;
}

.my-modal-content{
    padding: 2rem;
    border-radius: 15px;
}

.close-button {
    color: #aaaaaa;
    font-size: 28px;
    font-weight: bold;
    margin-left: 2rem;
}

.close-button:hover,
.close-button:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
}

.book-card {
    background-color: var(--main-color);
    color: var(--font-color);
    font-family: var(--font-family);
    display: flex;
    justify-content: center;
    gap: 15px;
    padding: 2rem;
    width: 900px;
    margin: auto;
    transition: .3s;
    border-radius: 20px;
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
    
}

.book-image {
    width: 400px;
    height: 600px;
    object-fit: cover;
    object-position: center;
    margin-right: 15px;
    border-radius: 12px;
}

.book-card .book-details {
    display: flex;
    flex-direction: column;
    cursor: pointer;
}

.book-card .book-title {
    font-weight: bold;
}

.book-card .book-author {
    font-style: italic;
    margin-bottom: .8rem;
}

.book-card .book-rating {
    margin-bottom: 10px;
}

.book-card .book-tags {
    margin-bottom: 10px;
}

.star-icon {
    width: 16px;
    height: 16px;
    vertical-align: middle;
}

.tag-chip {
    display: inline-block;
    padding: 0.4em 0.6em;
    margin-right: 0.4em;
    margin-bottom: 0.4em;
    font-size: .8em;
    line-height: 1;
    color: var(--font-color);
    background-color: #e8e8eb;
    border-radius: 2em;
    transition: .3s;
}

.tag-chip:hover{
    background-color: var(--secondary-color);
    color: var(--main-color);
    cursor: default;
}

.book-year {
    font-style: italic;
    margin-left: 10px;
}

.book-description {
    margin-top: 10px;
}

.book-link {
    align-self: flex-end;
    margin-top: auto;
}

@keyframes modalOpen {
    from {
        transform: scale(0);
        opacity: 0;
    }
    to {
        transform: scale(1);
        opacity: 1;
    }
}

.my-modal-content {
    animation: modalOpen .3s ease-out;
}


@media(max-width: 720px) {
    .book-card {
        width: 100%;
        margin-left: 20px;
        margin-right: 20px;
        display: flex;
        flex-direction: column;
        text-align: center;
    }

    .book-image{
        width: 50%;
        height: auto;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 2rem;
    }
    
    .close-button{
        position: absolute;
        top: 15%;
        right: 15%;
    }

    
    
}

@media(min-width: 450px){


    .centered-input{
        margin-left: 18%;
    }
}


.centered-input {
    position: relative;
    justify-content: center;
    left: 5%;
}

.user-input, .autocomplete-input, .search, .add {
    position: absolute;
    top: 0;
    left: 20%;
    border: none;
    padding: .3rem;
    border-radius: 2px;
}

.search{
    left: calc(20% + 175px);
}

.add{
    left: calc(20% + 235px);
}

.search-button{
    
}

.user-input {
    background: transparent;
    z-index: 2;
}

.autocomplete-input {
    color: #ccc;
    z-index: 1;
}