@using Gui.Events
@using Gui.Models
@using Gui.Query
@inject IEventService EventService
@inject IQueryService QueryService


@if (totalPages > 1)
{
    <div class="flex justify-content-center text-center mt-5">
        <MudPagination Color="Color.Inherit" Count="totalPages" SelectedChanged="OnPageChangedAsync"/>
    </div>
}


<div class="list-container">
    @foreach (var book in books)
    {
        <div class="book-card">
            <div class="book-cover">
                <img src="@book.ImageUrl" alt="@book.Title book cover"/>
                <div class="book-description">@book.Description</div>
            </div>
            <div class="book-info">
                <p class="book-title">@book.Title</p>
                <div class="book-author-rating">
                    <span>@book.Author</span>
                    <p class="book-rating">
                        @($"{book.Rating:F1}") <i class="fas fa-star"></i>
                    </p>
                </div>
                <div class="book-tags">
                    @foreach (var tag in book.Tags)
                    {
                        <div class="tag-chip">@tag</div>
                    }
                </div>
            </div>
        </div>
    }
</div>


@code {

    private int totalPages = 0;
    private int currentPage = 1;

    private string queryString = "";
    private string previouslyRead = "";

    private IEnumerable<BookCard> books = [];

    protected override void OnInitialized()
    {
        EventService.OnQuerySearch += HandleQuerySearch;
    }

    private async Task HandleQuerySearch((string query, string read, int pageNumber) query)
    {
        var result = await QueryService.QueryAsync(query.query, query.read, query.pageNumber);
        this.queryString = query.query;
        this.previouslyRead = query.read;
        this.currentPage = query.pageNumber;
        totalPages = result.Total / 10;

        if (result.Total % 10 != 0)
        {
            totalPages++;
        }

        books = result.Results;
        StateHasChanged();
    }

    private void OnPageChangedAsync(int pageNumber)
    {
        EventService.TriggerOnQuerySearch((queryString, previouslyRead, pageNumber));
    }

}