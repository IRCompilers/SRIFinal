@using Gui.Events
@using Gui.Query
@inject IQueryService QueryService
@inject IEventService eventService
@inject IJSRuntime JsRuntime

<div class="search-input mb-2">
    <input class="bottom-input"
           @bind="query"
           @oninput="FetchAutoComplete"
           @onkeyup="HandleKeyDown"
           placeholder="@queryPlaceholder"
           @ref="_inputElement"
           type="text"/>
    <input class="ghost-input top-input" readonly type="text" value="@ghostQuery"/>
    <button class="search-button" @onclick="Search">
        <i class="fas fa-search"></i>
    </button>
</div>

<div class="search-input">
    <input class="bottom-input"
           @bind="previouslyRead"
           placeholder="@readPlaceholder"
           type="text"/>
    <button class="id-button-right">
        <i class="fas fa-book"></i>
    </button>
</div>

<script>
    window.handleKeyDown = function (element) {
        element.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
            }
        });
    }
</script>

@code {
    private string queryPlaceholder { get; set; } = null!;
    private string readPlaceholder { get; set; } = null!;

    private string query { get; set; } = null!;
    private string ghostQuery { get; set; } = null!;
    private string previouslyRead { get; set; } = null!;
    private ElementReference _inputElement;

    private void Search()
    {
        eventService.TriggerOnQuerySearch((query, previouslyRead));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            queryPlaceholder = PickRandomPlaceholder();
            readPlaceholder = PickRandomPlaceholderRead();
            await JsRuntime.InvokeVoidAsync("handleKeyDown", _inputElement);
            StateHasChanged();
        }
    }

    private async Task FetchAutoComplete(ChangeEventArgs e)
    {
        var wholeInput = e.Value!.ToString()!;
        var toAutocomplete = wholeInput.Split().Last();
        var result = string.IsNullOrWhiteSpace(toAutocomplete) ? "" : await QueryService.AutoCompleteAsync(toAutocomplete ?? "");
        ghostQuery = wholeInput + result.Replace("\"", "");
    }

    private string PickRandomPlaceholder()
    {
        string[] placeholders =
        [
            "I like science fiction ...",
            "Detective stories are my thing ...",
            "I'm into fantasy ...",
            "I'm a fan of horror ...",
            "I'm a fan of romance ...",
            "Historical fiction is the best ...",
        ];

        return placeholders[new Random().Next(0, placeholders.Length)];
    }

    private string PickRandomPlaceholderRead()
    {
        string[] placeholders =
        [
            "Foundation, The Lord of the Rings, The Hobbit ...",
            "Sherlock Holmes, Hercule Poirot, Miss Marple ...",
            "Harry Potter, The Witcher, The Wheel of Time ...",
            "Dracula, Frankenstein, The Shining ...",
            "Pride and Prejudice, Wuthering Heights, Jane Eyre ...",
        ];

        return placeholders[new Random().Next(0, placeholders.Length)];
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                Search();
                break;
            case "Tab":
                query = ghostQuery;
                break;
        }
    }

}