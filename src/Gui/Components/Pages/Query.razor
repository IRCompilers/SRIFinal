@using Gui.Events
@using Gui.Query
@inject IQueryService QueryService
@inject IEventService eventService
@inject IJSRuntime JsRuntime

<div class="search-input">
    <input @bind="query"
           @oninput="FetchAutoComplete"
           @onkeyup="HandleKeyDown"
           placeholder="@PickRandomPlaceholder()"
           @ref="_inputElement"
           type="text"/>
    <input class="ghost-input" readonly type="text" value="@ghostQuery" />
    <button @onclick="Search"><i class="fas fa-search"></i></button>
</div>

<div class="search-input">
    <input @bind="query"
           @oninput="FetchAutoComplete"
           @onkeyup="HandleKeyDown"
           placeholder="@PickRandomPlaceholder()"
           @ref="_inputElement"
           type="text"/>
    <input class="ghost-input" readonly type="text" value="@ghostQuery" />
    <button @onclick="Search"><i class="fas fa-search"></i></button>
</div>

<script>
    window.handleKeyDown = function (element) {
        element.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
            }
        });
    }
</script>

@code {
    private string query { get; set; } = null!;
    private string ghostQuery { get; set; } = null!;
    private string previouslyRead { get; set; } = null!;
    private ElementReference _inputElement;

    private void Search()
    {
        eventService.TriggerOnQuerySearch((query, previouslyRead));
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("handleKeyDown", _inputElement);
        }
    }
    
    private async Task FetchAutoComplete(ChangeEventArgs e)
    {
        var wholeInput = e.Value!.ToString()!;
        var toAutocomplete = wholeInput.Split().Last();
        var result = string.IsNullOrWhiteSpace(toAutocomplete) ? "" : await QueryService.AutoCompleteAsync(toAutocomplete ?? "");
        ghostQuery = wholeInput + result.Replace("\"", "");
    }

    private string PickRandomPlaceholder()
    {
        string[] placeholders =
        [
            "I like science fiction ...",
            "Detective stories are my thing ...",
            "I'm into fantasy ...",
            "I'm a fan of horror ...",
            "I'm a fan of romance ...",
            "Historical fiction is the best ...",
        ];
        
        return placeholders[new Random().Next(0, placeholders.Length)];
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                Search();
                break;
            case "Tab":
                query = ghostQuery;
                break;
        }
    }

}